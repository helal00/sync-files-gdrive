#!/usr/bin/env bash
#Copyright (C) 2015  Helal Uddin <helal00 at gmail.com>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.


if [ ! -z "$_srcsbinpath" ]; then
	_miscpath="$_srcsbinpath/.store/linux-misc"
	if [ -s "$_miscpath" ] ; then
		. "$_miscpath"
	fi
	
	if ! _calloutput=$(addmiscpath "sshsetup" "$_sshsetup") ; then
		echo "$_calloutput" 1>&2
		exit 1
	else
		_sshsetup="$_calloutput"
	fi

	if ! _calloutput=$(addmiscpath "githublatest" "$_githublatest") ; then
		echo "$_calloutput" 1>&2
		exit 1
	else
		_githublatest="$_calloutput"
	fi
fi

function deletestorefile(){
	rm -rf $_srcsbinpath/.store/devload.ok
	rm -rf $_srcsbinpath/.store/paths.ok
}

function isntallskicka()
{
	local _retval
	_retval=1
	if confirmtogo "'skicka' $_installconfirmmsg" ; then	
		#if installgo ; then
			$_go get github.com/google/skicka
			if [ $? -ne 0 ] ; then
				echo "Please Install 'skicka' package to continue. Our Installation routine failed. Details at: https://github.com/google/skicka" 1>&2
				return $_retval
			fi
			 _retval=0
			 _skicka="$GOPATH/bin/skicka"
			#. $_srcsbinpath/drivesetup
		#fi
	fi
	
	return $_retval
}

function showdriveinstructions()
{
	local _config _showinstructions _retval
	_config=$1
	_retval=0
	if [ ! -f "$_config" ] ; then
		echo "Config file: $_config doesn't exist, set it up with $_srcsbinpath/drivesetup first before to continue." 1>&2
		return 1
	fi
	if grep -Eq "clientid=YOUR_GOOGLE_APP_CLIENT_ID|clientsecret=YOUR_GOOGLE_APP_SECRET" $_config ; then
		if confirmtogo "Your config file at $_config is not configured. clientid or clientsecret is missing. For setup instruction type 'yes' or only enter to cancel: " ; then
			read -p "Press enter to read instructions to setup Google Drive........."
			cat "$_srcsbinpath/steps"
			echo
			read -p "Press enter to continue........."
		fi
		if grep -Eq "clientid=YOUR_GOOGLE_APP_CLIENT_ID|clientsecret=YOUR_GOOGLE_APP_SECRET" $_config ; then
			_retval=1
		fi
	fi
	return $_retval
}

function testskickaconfig()
{
	local _lskicka _lnooutput _lconfigtosetup _ltokencache _lmetacache _retval _excode
	_lskicka="$1"
	_lnooutput="$2"
	_lconfigtosetup="$3"
	_ltokencache="$4"
	_lmetacache="$5"
	#_configfilename=${_lconfigtosetup##*/}
	#_configname=${_configfilename%%.config}
	_retval=1
	if [ "$_lnooutput" -eq 0 ] ; then
		echo "...We are attempting to make connection to your Google drive. If successful, you will see the content of your home folder."
	fi
	if [ -z "$_lconfigtosetup" ] && [ -z "$_ltokencache" ] && [ -z "$_lmetacache" ] ; then
		if [ "$_lnooutput" -eq 1 ] ; then
			$_lskicka -no-browser-auth ls / >/dev/null
		else
			$_lskicka -no-browser-auth ls /
		fi 
		_excode=$?
		_lconfigtosetup=$(echo ~/.skicka.config)
	else
		#echo "calling this : $_lskicka -config=${_lconfigtosetup} -tokencache=${_ltokencache}"
		if [ "$_lnooutput" -eq 1 ] ; then
			$_lskicka -config=${_lconfigtosetup} -tokencache=${_ltokencache} -metadata-cache-file=${_lmetacache} -no-browser-auth ls / >/dev/null
		else
			$_lskicka -config=${_lconfigtosetup} -tokencache=${_ltokencache} -metadata-cache-file=${_lmetacache} -no-browser-auth ls /
		fi
		_excode=$?
		#if [ $? -ne 0 ] && [ -f "${_ltokencache}" ] ; then
			#rm -rf ~/.skicka.metadata.cache
			#if [ "$_lnooutput" -eq 1 ] ; then
				#$_lskicka -config=${_lconfigtosetup} -tokencache=${_ltokencache} -metadata-cache-file=${_lmetacache} ls / >/dev/null
			#else
				#$_lskicka -config=${_lconfigtosetup} -tokencache=${_ltokencache} -metadata-cache-file=${_lmetacache} ls /
			#fi
			#_excode=$?
		#fi
		
	fi
	if [ $_excode -ne 0 ] ; then
		echo
		echo "	IMPORTANT: Google drive connection for config file $_lconfigtosetup was not successfull. Before continue, please run the setup again with '$_srcsbinpath/drivesetup' command." 1>&2
		#if [ -f $_srcsbinpath/.store/paths.ok ] ; then
			#if [ "${_lconfigtosetup}" = "$(echo ~/.skicka.config)" ] ; then
				#grep -v "drive://"  $_srcsbinpath/.store/paths.ok > $_srcsbinpath/.store/paths.ok
			#else
				#grep -v "drive:$_configname//"  $_srcsbinpath/.store/paths.ok > $_srcsbinpath/.store/paths.ok
			#fi
		#fi
	else
		echo
		echo "Goggle drive connection for config file $_lconfigtosetup was successfull."
		_retval=0
	fi
	
	return $_retval
}


function processdrivepath(){
	local _cline _path _param _p _configfile _tokencache _metacache _needle _inarray
	_cline=$1
	_path=$2
	if [ -z "$_path" ] || [ -z "$_cline" ] ; then
		return 1
	fi
	_param="${_path%%//*}"
	_p="${_path##*//}"
	
	if installgo && ! _skicka=$(isinstalled "skicka" "$_skicka") ; then
		#read -p "going to install skicka"
		if ! isntallskicka ; then
			_installfailed=1
			return 1
		else
			_relogineed=0
		fi
	fi
	
	if [ -z "$_p" ] ; then
		return 1
	fi
	
	#if [ -z "$_skicka"  ] ; then
		#_skicka=$(command -v skicka)
	#fi
	
	if [ ! -f "$_srcsbinpath/.store/binpaths.ok" ] || ! grep -q "_skicka=$_skicka$" "$_srcsbinpath/.store/binpaths.ok" ; then
		echo "_skicka=$_skicka" >> "$_srcsbinpath/.store/binpaths.ok"
	fi
	

	if [ "$_param" = "drive:" ] ; then
		_configfile=$(echo ~/.skicka.config)
		_tokencache=$(echo ~/.skicka.tokencache.json)
		_metacache=$(echo ~/.skicka.metadata.cache)
		_needle=$_configfile
	else
		_configfile="$_srcsbinpath/.store/${_param//drive:/}.config"
		_tokencache="${_configfile%%.config}.tokencache.json"
		_metacache="${_configfile%%.config}.metadata.cache"
		_needle="${_param//drive:/}"
	fi
	

	_inarray=$(echo ${_configprocessed[@]} | grep -o "$_needle" | wc -w)
	if [ $_inarray -gt 0 ] ; then
		echo "$_cline" >> "$_srcsbinpath/.store/paths.ok"
		#echo "file sync with skicka"
		return 1
	fi

	_inuarray=$(echo ${_drivenotconfig[@]} | grep -o "$_needle" | wc -w)
	if [ $_inuarray -gt 0 ] ; then
		return 1
	fi
	
	if showdriveinstructions "$_configfile" ; then
			if [ "$_configfile" = $(echo ~/.skicka.config) ] ; then
				_configfile=""
			fi
			if [ "$_tokencache" = $(echo ~/.skicka.tokencache.json) ] ; then
				_tokencache=""
			fi
			if [ "$_metacache" = $(echo ~/.skicka.metadata.cache) ] ; then
				_metacache=""
			fi
		if testskickaconfig "$_skicka" 0 "$_configfile" "$_tokencache" "$_metacache" ; then
			echo "$_cline" >> "$_srcsbinpath/.store/paths.ok"
			_configprocessed[${#_configprocessed[@]}]=$_needle
		else
			_drivenotconfig[${#_drivenotconfig[@]}]=$_needle
		fi
	else
		_drivenotconfig[${#_drivenotconfig[@]}]=$_needle
	fi
}


